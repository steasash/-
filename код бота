import logging
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler

# Включим логирование
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Определяем константы для состояний разговора
CHOOSING, MEDIA_TYPE, GENRE, CONTENT = range(4)

# Данные о фильмах и сериалах (можно заменить на данные из базы данных или API)
media_data = {
    'фильмы': {
        'комедия': [
            'Иван Васильевич меняет профессию',
            'Операция "Ы" и другие приключения Шурика',
            'Бриллиантовая рука',
            'Джентельмены удачи',
            'Кавказская пленница',
            'В джазе только девушки',
            'Один дома'
        ],
        'фантастика': [
            'Матрица',
            'Начало',
            'Интерстеллар',
            'Пятый элемент',
            'Терминатор 2: Судный день',
            'Чужой',
            'Бегущий по лезвию 2049'
        ],
        'ужасы': [
            'Оно',
            'Сияние',
            'Паранормальное явление',
            'Пила',
            'Звонок',
            'Чужой',
            'Хэллоуин'
        ],
        'боевик': [
            'Джон Уик',
            'Терминатор',
            'Рейд',
            'Мадагаскар',
            'Неудержимые',
            'Темный рыцарь',
            'Миссия невыполнима'
        ],
        'драма': [
            'Побег из Шоушенка',
            'Зеленая миля',
            'Форрест Гамп',
            'Титаник',
            'Леон',
            'Крестный отец',
            'Список Шиндлера'
        ],
        'триллер': [
            'Молчание ягнят',
            'Семь',
            'Исчезнувшая',
            'Остров проклятых',
            'Достать ножи',
            'Зодиак',
            'Город грехов'
        ],
        'мультфильм': [
            'Король Лев',
            'Холодное сердце',
            'Тайна Коко',
            'Зверополис',
            'Головоломка',
            'Шрек',
            'Моана'
        ],
        'детектив': [
            'Достать ножи',
            'Десять негритят',
            'Убийство в Восточном экспрессе',
            'Семь',
            'Головокружение',
            'Гражданин Кейн',
            'Основной инстинкт'
        ],
        'мелодрама': [
            'Дневник памяти',
            'Титаник',
            'Великий Гэтсби',
            'Предложение',
            'Отпуск по обмену',
            'Ноттинг Хилл',
            'Любовь и голуби'
        ]
    },
    'сериалы': {
        'комедия': [
            'Друзья',
            'Теория большого взрыва',
            'Офис',
            'Клиника',
            'Как я встретил вашу маму',
            'Бруклин 9-9',
            'Шиттс Крик'
        ],
        'фантастика': [
            'Черное зеркало',
            'Доктор Кто',
            'Секретные материалы',
            'Мир Дикого запада',
            'Сверхъестественное',
            'Страшные сказки',
            'Твин Пикс'
        ],
        'ужасы': [
            'Ходячие мертвецы',
            'Американская история ужасов',
            'Очень странные дела',
            'Сабрина',
            'Баффи - истребительница вампиров',
            'Заклятие',
            'Уэнсдей'
        ],
        'боевик': [
            '24 часа',
            'Стрела',
            'Тёмный ангел',
            'Пираты',
            'Викинги',
            'Черный список',
            'Мандалорец'
        ],
        'драма': [
            'Игра престолов',
            'Во все тяжкие',
            'Клан Сопрано',
            'Доктор Хаус',
            'Бумажный дом',
            'Корона',
            'Это мы'
        ],
        'триллер': [
            'Твин Пикс',
            'Настоящий детектив',
            'Милларды',
            'Острые козырьки',
            'Карточный домик',
            'Родина',
            'Лучше звоните Солу'
        ],
        'мультсериал': [
            'Симпсоны',
            'Южный парк',
            'Рик и Морти',
            'Гравити Фолз',
            'Время приключений',
            'Футурама',
            'Бэтмен'
        ],
        'детектив': [
            'Шерлок',
            'Настоящий детектив',
            'Убийство',
            'Менталист',
            'Элементарно',
            'Лютер',
            'Дефективный детектив'
        ],
        'мелодрама': [
            'Секс в большом городе',
            'Сотня',
            'Эйфория',
            'Бриджертоны',
            'Дневники вампира',
            'Сплетница',
            'Остаться в живых'
        ]
    }
}

# Клавиатура для выбора типа медиа
media_type_keyboard = [['фильмы', 'сериалы']]
media_type_markup = ReplyKeyboardMarkup(media_type_keyboard, one_time_keyboard=True)

# Функция для старта бота
def start(update, context):
    update.message.reply_text(
        "Привет! Я помогу тебе выбрать что посмотреть.\n"
        "Выбери, что тебя интересует:",
        reply_markup=media_type_markup
    )
    return MEDIA_TYPE

# Функция для обработки выбора типа медиа
def media_type(update, context):
    user_choice = update.message.text.lower()
    context.user_data['media_type'] = user_choice
    
    if user_choice in media_data:
        # Создаем клавиатуру с жанрами
        genres = list(media_data[user_choice].keys())
        # Разбиваем на 3 строки по 3 кнопки
        genre_keyboard = [genres[i:i+3] for i in range(0, len(genres), 3)]
        reply_markup = ReplyKeyboardMarkup(genre_keyboard, one_time_keyboard=True)
        
        update.message.reply_text(
            f"Отлично! Ты выбрал {user_choice}. Теперь выбери жанр:",
            reply_markup=reply_markup
        )
        return GENRE
    else:
        update.message.reply_text("Пожалуйста, выбери один из предложенных вариантов.")
        return MEDIA_TYPE

# Функция для обработки выбора жанра
def genre(update, context):
    user_choice = update.message.text.lower()
    media_type = context.user_data['media_type']
    
    if media_type in media_data and user_choice in media_data[media_type]:
        context.user_data['genre'] = user_choice
        content_list = media_data[media_type][user_choice]
        
        # Формируем сообщение с контентом
        message = f"Вот подборка {media_type} в жанре {user_choice}:\n\n"
        for i, item in enumerate(content_list, 1):
            message += f"{i}. {item}\n"
        
        update.message.reply_text(
            message,
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    else:
        update.message.reply_text("Пожалуйста, выбери один из предложенных жанров.")
        return GENRE

# Функция для отмены разговора
def cancel(update, context):
    update.message.reply_text(
        'Диалог прерван. Нажми /start чтобы начать заново.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    # Создаем Updater и передаем ему токен вашего бота
    updater = Updater("YOUR_TELEGRAM_BOT_TOKEN", use_context=True)
    
    # Получаем диспетчер для регистрации обработчиков
    dp = updater.dispatcher

    # Создаем обработчик разговоров
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MEDIA_TYPE: [MessageHandler(Filters.regex('^(фильмы|сериалы)$'), media_type)],
            GENRE: [MessageHandler(Filters.text & ~Filters.command, genre)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Регистрируем обработчик в диспетчере
    dp.add_handler(conv_handler)

    # Запускаем бота
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
